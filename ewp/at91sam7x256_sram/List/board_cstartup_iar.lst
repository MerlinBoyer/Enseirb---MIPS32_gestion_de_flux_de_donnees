###############################################################################
#                                                                             #
#     IAR Assembler V6.70.1.5641/W32 for ARM 07/May/2018  11:59:06            #
#     Copyright 1999-2013 IAR Systems AB.                                     #
#                                                                             #
#           Source file   =  H:\MIP\MI202_TP_micropro\ProjetConcombreDeMer\PCDM\ewp\at91lib\boards\at91sam7x-ek\board_cstartup_iar.s#
#           List file     =  H:\MIP\MI202_TP_micropro\ProjetConcombreDeMer\PCDM\ewp\at91sam7x256_sram\List\board_cstartup_iar.lst#
#           Object file   =  H:\MIP\MI202_TP_micropro\ProjetConcombreDeMer\PCDM\ewp\at91sam7x256_sram\Obj\board_cstartup_iar.o#
#           Command line  =  H:\MIP\MI202_TP_micropro\ProjetConcombreDeMer\PCDM\ewp\at91lib\boards\at91sam7x-ek\board_cstartup_iar.s #
#                            -OH:\MIP\MI202_TP_micropro\ProjetConcombreDeMer\PCDM\ewp\at91sam7x256_sram\Obj\ #
#                            -s+ -M<> -w+ -r -Dat91sam7x256 -Dsram            #
#                            -DTRACE_LEVEL=4                                  #
#                            -LH:\MIP\MI202_TP_micropro\ProjetConcombreDeMer\PCDM\ewp\at91sam7x256_sram\List\ #
#                            -t8 --cpu ARM7TDMI --fpu None                    #
#                            -IH:\MIP\MI202_TP_micropro\ProjetConcombreDeMer\PCDM\ewp\..\..\..\at91lib\ #
#                            -IH:\MIP\MI202_TP_micropro\ProjetConcombreDeMer\PCDM\ewp\..\..\..\at91lib\peripherals\ #
#                            -IH:\MIP\MI202_TP_micropro\ProjetConcombreDeMer\PCDM\ewp\..\..\..\at91lib\boards\at91sam7x-ek\ #
#                                                                             #
###############################################################################

    1                           /* -------------------------------------------
                                ---------------------------------
    2                            *         ATMEL Microcontroller Software
                                 Support 
    3                            * -------------------------------------------
                                ---------------------------------
    4                            * Copyright (c) 2008, Atmel Corporation
    5                            *
    6                            * All rights reserved.
    7                            *
    8                            * Redistribution and use in source and binary
                                 forms, with or without
    9                            * modification, are permitted provided that
                                 the following conditions are met:
   10                            *
   11                            * - Redistributions of source code must
                                 retain the above copyright notice,
   12                            * this list of conditions and the disclaimer
                                 below.
   13                            *
   14                            * Atmel's name may not be used to endorse or
                                 promote products derived from
   15                            * this software without specific prior
                                 written permission.
   16                            *
   17                            * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY
                                 ATMEL "AS IS" AND ANY EXPRESS OR
   18                            * IMPLIED WARRANTIES, INCLUDING, BUT NOT
                                 LIMITED TO, THE IMPLIED WARRANTIES OF
   19                            * MERCHANTABILITY, FITNESS FOR A PARTICULAR
                                 PURPOSE AND NON-INFRINGEMENT ARE
   20                            * DISCLAIMED. IN NO EVENT SHALL ATMEL BE
                                 LIABLE FOR ANY DIRECT, INDIRECT,
   21                            * INCIDENTAL, SPECIAL, EXEMPLARY, OR
                                 CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                 NOT
   22                            * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
                                 OR SERVICES; LOSS OF USE, DATA,
   23                            * OR PROFITS; OR BUSINESS INTERRUPTION)
                                 HOWEVER CAUSED AND ON ANY THEORY OF
   24                            * LIABILITY, WHETHER IN CONTRACT, STRICT
                                 LIABILITY, OR TORT (INCLUDING
   25                            * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
                                 OUT OF THE USE OF THIS SOFTWARE,
   26                            * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
                                 DAMAGE.
   27                            * -------------------------------------------
                                ---------------------------------
   28                            */
   29                           
   30                           /*
   31                                IAR startup file for AT91SAM7X microcontr
                                ollers.
   32                            */
   33                           
   34                                   MODULE  ?cstartup
   35                           
   36                                   ;; Forward declaration of sections.
   37                                   SECTION IRQ_STACK:DATA:NOROOT(2)
   38                                   SECTION CSTACK:DATA:NOROOT(3)
   39                           
   40                           //--------------------------------------------
                                ----------------------------------
   41                           //         Headers
   42                           //--------------------------------------------
                                ----------------------------------
   43                           
   44                           #define __ASSEMBLY__
   45                           #include "board.h"
   46                           
   47                           //--------------------------------------------
                                ----------------------------------
   48                           //         Definitions
   49                           //--------------------------------------------
                                ----------------------------------
   50                           
   51                           #define ARM_MODE_ABT     0x17
   52                           #define ARM_MODE_FIQ     0x11
   53                           #define ARM_MODE_IRQ     0x12
   54                           #define ARM_MODE_SVC     0x13
   55                           #define ARM_MODE_SYS     0x1F
   56                           
   57                           #define I_BIT            0x80
   58                           #define F_BIT            0x40
   59                           
   60                           //--------------------------------------------
                                ----------------------------------
   61                           //         Startup routine
   62                           //--------------------------------------------
                                ----------------------------------
   63                           
   64                           /*
   65                              Exception vectors
   66                            */
   67                                   SECTION .vectors:CODE:NOROOT(2)
   68                           
   69                                   PUBLIC  resetVector
   70                                   PUBLIC  irqHandler
   71                           
   72                                   EXTERN  Undefined_Handler
   73                                   EXTERN  SWI_Handler
   74                                   EXTERN  Prefetch_Handler
   75                                   EXTERN  Abort_Handler
   76                                   EXTERN  FIQ_Handler
   77                           
   78                                   ARM
   79                           
   80                           __iar_init$$done:               ; The
                                 interrupt vector is not needed
   81                                                           ; until after
                                 copy initialization is done
   82                           
   83                           resetVector:
   84                                   ; All default exception handlers
                                 (except reset) are
   85                                   ; defined as weak symbol definitions.
   86                                   ; If a handler is defined by the
                                 application it will take precedence.
   87    00000000 74F09FE5              LDR     pc, =resetHandler        ;
                                                      Reset
   88    00000004 14F09FE5              LDR     pc, Undefined_Addr       ;
                                                      Undefined instructions
   89    00000008 14F09FE5              LDR     pc, SWI_Addr             ;
                                                      Software interrupt
                                                      (SWI/SYS)
   90    0000000C 14F09FE5              LDR     pc, Prefetch_Addr        ;
                                                      Prefetch abort
   91    00000010 14F09FE5              LDR     pc, Abort_Addr           ; Data
                                                      abort
   92    00000014 FEFFFFEA              B       .                        ;
                                                                          RESER
                                                                         VED
   93    00000018 60F09FE5              LDR     pc, =irqHandler          ;
                                                      IRQ
   94    0000001C 0CF09FE5              LDR     pc, FIQ_Addr             ;
                                                      FIQ
   95                           
   96    00000020 ........      Undefined_Addr: DCD   Undefined_Handler
   97    00000024 ........      SWI_Addr:       DCD   SWI_Handler
   98    00000028 ........      Prefetch_Addr:  DCD   Prefetch_Handler
   99    0000002C ........      Abort_Addr:     DCD   Abort_Handler
  100    00000030 ........      FIQ_Addr:       DCD   FIQ_Handler
  101                                   
  102                           /*
  103                              Handles incoming interrupt requests by
                                 branching to the corresponding
  104                              handler, as defined in the AIC. Supports
                                 interrupt nesting.
  105                            */
  106                           irqHandler:
  107                                   /* Save interrupt context on the stack
                                 to allow nesting */
  108    00000034 04E04EE2              SUB     lr, lr, #4
  109    00000038 00402DE9              STMFD   sp!, {lr}
  110    0000003C 00E04FE1              MRS     lr, SPSR
  111    00000040 01402DE9              STMFD   sp!, {r0, lr}
  112                           
  113                                   /* Write in the IVR to support Protect
                                 Mode */
  114    00000044 38E09FE5              LDR     lr, =AT91C_BASE_AIC
  115    00000048 00019EE5              LDR     r0, [r14, #AIC_IVR]
  116    0000004C 00E18EE5              STR     lr, [r14, #AIC_IVR]
  117                           
  118                                   /* Branch to interrupt handler in
                                 Supervisor mode */
  119    00000050 1FF021E3              MSR     CPSR_c, #ARM_MODE_SYS
  120    00000054 1E502DE9              STMFD   sp!, {r1-r3, r4, r12,
                                                 lr}
  121    00000058 0FE0A0E1              MOV     lr, pc
  122    0000005C 10FF2FE1              BX      r0
  123    00000060 1E50BDE8              LDMIA   sp!, {r1-r3, r4, r12,
                                                 lr}
  124    00000064 92F021E3              MSR     CPSR_c, #ARM_MODE_IRQ |
                                                 I_BIT
  125                           
  126                                   /* Acknowledge interrupt */
  127    00000068 14E09FE5              LDR     lr, =AT91C_BASE_AIC
  128    0000006C 30E18EE5              STR     lr, [r14, #AIC_EOICR]
  129                           
  130                                   /* Restore interrupt context and
                                 branch back to calling code */
  131    00000070 0140BDE8              LDMIA   sp!, {r0, lr}
  132    00000074 0EF06FE1              MSR     SPSR_cxsf, lr
  133    00000078 0080FDE8              LDMIA   sp!, {pc}^
  134                           
  135                           
  136                           /*
  137                              After a reset, execution starts here, the
                                 mode is ARM, supervisor
  138                              with interrupts disabled.
  139                              Initializes the chip and branches to the
                                 main() function.
  140                            */
  141                                   SECTION .cstartup:CODE:NOROOT(2)
  141.1                                  TABLE
  141.2  0000007C ........              Reference on line 87 
  141.3  00000080 ........              Reference on line 93 
  141.4  00000084 00F0FFFF              Reference on line 114,127 
  141.5                                 RSEG (including table)
  141                                   SECTION .cstartup:CODE:NOROOT(2)
  142                           
  143                                   PUBLIC  resetHandler
  144                                   EXTERN  LowLevelInit
  145                                   EXTERN  ?main
  146                                   REQUIRE resetVector
  147                                   ARM
  148                           
  149                           resetHandler:
  150                           
  151                                   /* Set pc to actual code location
                                 (i.e. not in remap zone) */
  152                                 //AT91C_BASE_US0->US_THR = tab[fir];
  153                                 //fir++;      LDR     pc, =label
  154                           
  155                                   /* Perform low-level initialization of
                                 the chip using LowLevelInit() */
  156                           label:
  157    00000000 2C009FE5                  LDR     r0, =LowLevelInit
  158    00000004 2C409FE5              LDR     r4, =SFE(CSTACK)
  159    00000008 04D0A0E1              MOV     sp, r4
  160    0000000C 0FE0A0E1              MOV     lr, pc
  161    00000010 10FF2FE1              BX      r0
  162                           
  163                                   /* Set up the interrupt stack pointer.
                                 */
  164    00000014 D2F021E3              MSR     cpsr_c, #ARM_MODE_IRQ | I_BIT |
                                                 F_BIT      ; Change the
                                                 mode
  165    00000018 1CD09FE5              LDR     sp, =SFE(IRQ_STACK)
  166                           
  167                                   /* Set up the SYS stack pointer.
                                 */
  168    0000001C 5FF021E3              MSR     cpsr_c, #ARM_MODE_SYS | F_BIT  
                                                            ; Change the
                                                 mode
  169    00000020 10D09FE5              LDR     sp, =SFE(CSTACK)
  170                           
  171                                   /* Branch to main() */
  172    00000024 14009FE5              LDR     r0, =?main
  173    00000028 0FE0A0E1              MOV     lr, pc
  174    0000002C 10FF2FE1              BX      r0
  175                           
  176                                   /* Loop indefinitely when program is
                                 finished */
  177                           loop4:
  178    00000030 FEFFFFEA              B       loop4
  179                           
  180                                   END
  180.1                                  TABLE
  180.2  00000034 ........              Reference on line 157 
  180.3  00000038 ........              Reference on line 158,169 
  180.4  0000003C ........              Reference on line 165 
  180.5  00000040 ........              Reference on line 172 
  180.6                                 END (including table)
##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 204         #
##############################



